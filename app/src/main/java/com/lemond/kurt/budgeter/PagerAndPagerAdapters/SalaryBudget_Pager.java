package com.lemond.kurt.budgeter.PagerAndPagerAdapters;

import android.content.Context;
import android.content.DialogInterface;
import android.graphics.drawable.GradientDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.TabLayout;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.SearchView;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.ContextMenu;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.lemond.kurt.budgeter.DataBase.DatabaseAdapter;
import com.lemond.kurt.budgeter.Fragments.SalaryBudget;
import com.lemond.kurt.budgeter.Fragments.SalaryBudget_Daily;
import com.lemond.kurt.budgeter.ObjectClasses.BudgetPlanClass;
import com.lemond.kurt.budgeter.ObjectClasses.SalaryItemClass;
import com.lemond.kurt.budgeter.R;
import com.lemond.kurt.budgeter.Utilities.G_Functions;
import com.lemond.kurt.budgeter.Utilities.G_ViewHolders;
import com.lemond.kurt.budgeter.Utilities.SettingsManager;

import java.util.ArrayList;


/**
 * Created by kurt_capatan on 2/2/2016.
 */
public class SalaryBudget_Pager extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;
    private ViewPager viewPager;
    private SalaryBudget_PagerAdapter mAdapter;
    private SearchView mSearchView;
    private ListView lvSalaryBudgetSearch;
    private ProgressBar pbSearchingSalaryBudget;
    private TextView tvSearchNoMatched;
    private DrawerLayout dlSalaryBudget;
    private TabLayout mTablayout;
    private DatabaseAdapter mDbAdapter;

    private static boolean isContextActivated = false;

    private OnFragmentInteractionListener mListener;


    public SalaryBudget_Pager() {
    }
    /************************************************* AUTO GENERATED BY ANDROID STUDIO **************************************************/

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment SalaryBudget.
     */
    // TODO: Rename and change types and number of parameters
    public static SalaryBudget newInstance(String param1, String param2) {
        SalaryBudget fragment = new SalaryBudget();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View rootView = inflater.inflate(R.layout.fragment_salary_budget_tablayout, container, false);
        setHasOptionsMenu(true);
        mDbAdapter = new DatabaseAdapter(getContext());
        dlSalaryBudget = (DrawerLayout) rootView.findViewById(R.id.dlSalaryBudget);
        dlSalaryBudget.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
        dlSalaryBudget.setDrawerListener(new DrawerLayout.DrawerListener() {
            @Override
            public void onDrawerSlide(View drawerView, float slideOffset) {
                lvSalaryBudgetSearch.setVisibility(View.GONE);
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                dlSalaryBudget.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN);
                pbSearchingSalaryBudget.setVisibility(View.GONE);
                lvSalaryBudgetSearch.setVisibility(View.GONE);
                tvSearchNoMatched.setText("Type your keyword above.");
                tvSearchNoMatched.setVisibility(View.VISIBLE);
            }

            @Override
            public void onDrawerClosed(View drawerView) {

            }

            @Override
            public void onDrawerStateChanged(int newState) {

            }
        });
        mTablayout = (TabLayout) rootView.findViewById(R.id.salaryBudgetTabLayout);
        mTablayout.addTab(mTablayout.newTab());
        mTablayout.getTabAt(0).setCustomView(R.layout.tab_daily);
        ArrayList<BudgetPlanClass> budgetPlanClasses = mDbAdapter.GetAllBudgetLists();
        if (!budgetPlanClasses.isEmpty()) {
            for (BudgetPlanClass bPlan : budgetPlanClasses) {
                mTablayout.addTab(mTablayout.newTab());
                View tabView = null;
                tabView = getActivity().getLayoutInflater().inflate(R.layout.tab_daily, null);
                TextView tvTabDaily = (TextView) tabView.findViewById(R.id.tvTabDaily);
                tvTabDaily.setText("  " + bPlan.getPlan_name());
                mTablayout.getTabAt(mTablayout.getTabCount() - 1).setCustomView(tabView);
            }
            mTablayout.setTabMode(TabLayout.MODE_SCROLLABLE);
            mTablayout.setTabGravity(TabLayout.GRAVITY_CENTER);
        } else {
            mTablayout.setTabMode(TabLayout.MODE_FIXED);
            mTablayout.setTabGravity(TabLayout.GRAVITY_FILL);
        }
        mTablayout.addTab(mTablayout.newTab());
        mTablayout.getTabAt(mTablayout.getTabCount() - 1).setCustomView(R.layout.tab_monthly);
        viewPager = (ViewPager) rootView.findViewById(R.id.salaryBudgetPager);
        mAdapter = new SalaryBudget_PagerAdapter(getContext(), getActivity().getSupportFragmentManager(), viewPager, mTablayout.getTabCount());
        viewPager.setAdapter(mAdapter);
        viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(mTablayout));
        LinearLayout tabStrip = ((LinearLayout) mTablayout.getChildAt(0));
        for (int i = 0; i < tabStrip.getChildCount(); i++) {
            tabStrip.getChildAt(i).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    if (isContextActivated) {
                        return true;
                    } else {
                        return false;
                    }
                }
            });
        }

        mTablayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                viewPager.setCurrentItem(tab.getPosition());
                if (viewPager.getCurrentItem() == 0) {
                    SalaryBudget_Daily daily = (SalaryBudget_Daily) mAdapter.getRegisteredFragment(0);
                    if (daily != null)
                        daily.updateData();
                } else if (viewPager.getCurrentItem() == mTablayout.getTabCount() - 1) {
                    SalaryBudget monthly = (SalaryBudget) mAdapter.getRegisteredFragment(mTablayout.getTabCount() - 1);
                    if (monthly != null)
                        monthly.updateData();
                } else {
                    SalaryBudget_Daily daily2 = (SalaryBudget_Daily) mAdapter.getRegisteredFragment(tab.getPosition());
                    if (daily2 != null)
                        daily2.updateData();
                }
                getActivity().invalidateOptionsMenu();
            }

            @Override
            public void onTabUnselected(TabLayout.Tab tab) {

            }

            @Override
            public void onTabReselected(TabLayout.Tab tab) {

            }

        });
        lvSalaryBudgetSearch = (ListView) rootView.findViewById(R.id.lvSalaryBudgetSearch);
        pbSearchingSalaryBudget = (ProgressBar) rootView.findViewById(R.id.pbSearchingSalaryBudget);
        tvSearchNoMatched = (TextView) rootView.findViewById(R.id.tvSearchNoMatched);
        return rootView;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        dlSalaryBudget.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
        super.onSaveInstanceState(outState);
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        if (mTablayout.getSelectedTabPosition() == 0 || mTablayout.getSelectedTabPosition() == mTablayout.getTabCount() - 1) {
            inflater.inflate(R.menu.menu_salary_budget, menu);
        } else {
            inflater.inflate(R.menu.menu_salary_budget_with_delete, menu);
        }
        MenuItem searchMenu = menu.findItem(R.id.menuSearch);
        final ExecuteSearch[] executeSearch = new ExecuteSearch[1];
        mSearchView = (SearchView) searchMenu.getActionView();
        // Assumes current activity is the searchable activity
        mSearchView.setIconifiedByDefault(true); //  iconify the widget; expand it when clicked
        mSearchView.setQueryHint("Search Item");
        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                if (!newText.isEmpty() || !newText.equalsIgnoreCase("")) {
                    executeSearch[0] = new ExecuteSearch(newText);
                    executeSearch[0].execute(newText);
                } else {
                    pbSearchingSalaryBudget.setVisibility(View.GONE);
                    tvSearchNoMatched.setText("Cannot search with an empty keyword.");
                    tvSearchNoMatched.setVisibility(View.VISIBLE);
                    lvSalaryBudgetSearch.setVisibility(View.GONE);
                }
                return true;
            }
        });
        MenuItemCompat.setOnActionExpandListener(searchMenu, new MenuItemCompat.OnActionExpandListener() {
            @Override
            public boolean onMenuItemActionCollapse(MenuItem item) {
                if (executeSearch[0] != null && executeSearch[0].getStatus().equals(AsyncTask.Status.RUNNING))
                    executeSearch[0].cancel(true);
                dlSalaryBudget.closeDrawer(GravityCompat.END);
                return true;  // Return true to collapse action view
            }

            @Override
            public boolean onMenuItemActionExpand(MenuItem item) {
                dlSalaryBudget.openDrawer(GravityCompat.END);
                return true;  // Return true to expand action view
            }
        });
        mSearchView.setMaxWidth(Integer.MAX_VALUE);
    }

    public SearchView getSearchView() {
        return mSearchView;
    }

    AlertDialog mainAlert2;

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menuAddList:
                View addBudgetPlan = getActivity().getLayoutInflater().inflate(R.layout.dialog_add_budget_list, null);
                final EditText etListName = (EditText) addBudgetPlan.findViewById(R.id.etListName);
                final EditText etBudgetAmount = (EditText) addBudgetPlan.findViewById(R.id.etBudgetAmount);
                TextWatcher textWatcher = new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        if (!etListName.getText().toString().trim().isEmpty() && !etBudgetAmount.getText().toString().trim().isEmpty() && mainAlert2 != null)
                            mainAlert2.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(true);
                        else
                            mainAlert2.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);
                    }

                    @Override
                    public void afterTextChanged(Editable s) {

                    }
                };
                etListName.addTextChangedListener(textWatcher);
                etBudgetAmount.addTextChangedListener(textWatcher);
                AlertDialog.Builder mainbuilder2 = new AlertDialog.Builder(getActivity());
                mainbuilder2.setView(addBudgetPlan);
                mainbuilder2.setTitle("Add Daily Budget Plan");
                mainbuilder2.setCancelable(true);
                mainbuilder2.setPositiveButton("Add", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {

                    }
                });
                mainbuilder2.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

                mainAlert2 = mainbuilder2.create();
                mainAlert2.setOnShowListener(new DialogInterface.OnShowListener() {
                    @Override
                    public void onShow(DialogInterface dialog) {
                        mainAlert2.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);
                    }
                });
                mainAlert2.show();
                mainAlert2.getButton(DialogInterface.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (mDbAdapter.GetBudgetPlan(etListName.getText().toString().trim()) == null) {
                            mTablayout.addTab(mTablayout.newTab(), mTablayout.getTabCount() - 1, false);
//                        viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(mTablayout));
                            View tabView = null;
                            tabView = getActivity().getLayoutInflater().inflate(R.layout.tab_daily, null);
                            TextView tvTabDaily = (TextView) tabView.findViewById(R.id.tvTabDaily);
                            tvTabDaily.setText("  " + etListName.getText().toString().trim());
                            mDbAdapter.insertIntoBudgetLists(new BudgetPlanClass(etListName.getText().toString(), Double.parseDouble(etBudgetAmount.getText().toString())));
                            mTablayout.getTabAt(mTablayout.getTabCount() - 2).setCustomView(tabView);
                            mTablayout.setTabMode(TabLayout.MODE_SCROLLABLE);
                            mTablayout.setTabGravity(TabLayout.GRAVITY_CENTER);
                            mAdapter = new SalaryBudget_PagerAdapter(getContext(), getActivity().getSupportFragmentManager(), viewPager, mTablayout.getTabCount());
                            viewPager.setAdapter(mAdapter);
                            TabLayout.Tab tab = mTablayout.getTabAt(0);
                            tab.select();
                            getActivity().invalidateOptionsMenu();
                            mainAlert2.dismiss();
                        } else {
                            Toast.makeText(getContext(), etListName.getText().toString().trim() + " budget list already exists, enter another name", Toast.LENGTH_LONG).show();
                        }
                    }
                });

                break;
            case R.id.menuSort:
                final String[] chosenSort = {""};
                LayoutInflater inflater = getActivity().getLayoutInflater();
                View dialoglayout = inflater.inflate(R.layout.sort_dialog, null);

                final LinearLayout llNameAsc = (LinearLayout) dialoglayout.findViewById(R.id.llNameAsc);
                final LinearLayout llNameDesc = (LinearLayout) dialoglayout.findViewById(R.id.llNameDesc);
                final LinearLayout llPriceAsc = (LinearLayout) dialoglayout.findViewById(R.id.llPriceAsc);
                final LinearLayout llPriceDesc = (LinearLayout) dialoglayout.findViewById(R.id.llPriceDesc);
                final LinearLayout llDateAsc = (LinearLayout) dialoglayout.findViewById(R.id.llDateAsc);
                final LinearLayout llDateDesc = (LinearLayout) dialoglayout.findViewById(R.id.llDateDesc);

                llDateAsc.setClickable(false);
                llDateDesc.setClickable(false);
                llDateAsc.setVisibility(View.GONE);
                llDateDesc.setVisibility(View.GONE);

                switch (new SettingsManager(getContext()).getSortOptionMock()) {
                    case SettingsManager.NAME_ASC_MOCK:
                        llNameAsc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_ASC_MOCK;
                        break;
                    case SettingsManager.NAME_DESC_MOCK:
                        llNameDesc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_DESC_MOCK;
                        break;
                    case SettingsManager.PRICE_ASC_MOCK:
                        llPriceAsc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_ASC_MOCK;
                        break;
                    case SettingsManager.PRICE_DESC_MOCK:
                        llPriceDesc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_DESC_MOCK;
                        break;
                }
                llNameAsc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameAsc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_ASC_MOCK;
                    }
                });
                llNameDesc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_DESC_MOCK;
                    }
                });
                llPriceAsc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_ASC_MOCK;
                    }
                });
                llPriceDesc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_DESC_MOCK;
                    }
                });
                AlertDialog.Builder mainbuilder = new AlertDialog.Builder(getActivity());
                mainbuilder.setView(dialoglayout);
                mainbuilder.setTitle("Sort");
                mainbuilder.setCancelable(true);
                mainbuilder.setPositiveButton("Apply", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        new SettingsManager(getContext()).setSortOptionMock(chosenSort[0]);
                        ((SalaryBudget_Daily) mAdapter.getRegisteredFragment(0)).updateData();
                        ((SalaryBudget) mAdapter.getRegisteredFragment(1)).updateData();
                    }
                });
                mainbuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

                final AlertDialog mainAlert = mainbuilder.create();
                mainAlert.show();
                return true;
            case R.id.menuDeleteList:
//                viewPager.removeViewAt(mTablayout.getSelectedTabPosition());
                View tabView = mTablayout.getTabAt(mTablayout.getSelectedTabPosition()).getCustomView();
                TextView tvTabDaily = (TextView) tabView.findViewById(R.id.tvTabDaily);
                mDbAdapter.deleteSpecificBudgetPlan(tvTabDaily.getText().toString().trim());
                mTablayout.removeTabAt(mTablayout.getSelectedTabPosition());
                if (mTablayout.getTabCount() > 3) {
                    mTablayout.setTabMode(TabLayout.MODE_SCROLLABLE);
                    mTablayout.setTabGravity(TabLayout.GRAVITY_CENTER);
                } else {
                    mTablayout.setTabMode(TabLayout.MODE_FIXED);
                    mTablayout.setTabGravity(TabLayout.GRAVITY_FILL);
                }
                mAdapter = new SalaryBudget_PagerAdapter(getContext(), getActivity().getSupportFragmentManager(), viewPager, mTablayout.getTabCount());
                viewPager.setAdapter(mAdapter);
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    public static void setContextActivated(boolean arg) {
        isContextActivated = arg;
    }

    public ViewPager getViewPager() {
        return viewPager;
    }


    /***********************************
     * FOR SEARCH
     ****************************************/

    public class ExecuteSearch extends AsyncTask<String, Void, ArrayList<SalaryItemClass>> {
        private DatabaseAdapter dbAdapter;

        private String mQuery;

        public ExecuteSearch(String query) {
            this.mQuery = query;
        }

        @Override
        protected void onPreExecute() {
            dbAdapter = new DatabaseAdapter(getContext());
            pbSearchingSalaryBudget.setVisibility(View.VISIBLE);
            lvSalaryBudgetSearch.setVisibility(View.GONE);
            tvSearchNoMatched.setVisibility(View.GONE);
            super.onPreExecute();
        }

        @Override
        protected ArrayList<SalaryItemClass> doInBackground(String... params) {
            return dbAdapter.searchAllSavedItemsSalaryBudget(params[0]);
        }

        @Override
        protected void onCancelled() {
            pbSearchingSalaryBudget.setVisibility(View.GONE);
            lvSalaryBudgetSearch.setVisibility(View.GONE);
            tvSearchNoMatched.setVisibility(View.GONE);
            super.onCancelled();
        }

        @Override
        protected void onPostExecute(ArrayList<SalaryItemClass> salaryItemClasses) {
            pbSearchingSalaryBudget.setVisibility(View.GONE);
            if (salaryItemClasses.size() > 0) {
                SearchAdapter searchAdapter = new SearchAdapter(salaryItemClasses, mQuery);
                lvSalaryBudgetSearch.setAdapter(searchAdapter);
                lvSalaryBudgetSearch.setVisibility(View.VISIBLE);
                tvSearchNoMatched.setVisibility(View.GONE);
            } else {
                lvSalaryBudgetSearch.setVisibility(View.GONE);
                tvSearchNoMatched.setText("No items matched your keyword.");
                tvSearchNoMatched.setVisibility(View.VISIBLE);
            }
            super.onPostExecute(salaryItemClasses);
        }
    }

    private class SearchAdapter extends BaseAdapter {
        SalaryBudget salaryBudget = (SalaryBudget) mAdapter.getRegisteredFragment(1);
        SalaryBudget_Daily salaryBudget_daily = (SalaryBudget_Daily) mAdapter.getRegisteredFragment(0);

        ArrayList<SalaryItemClass> mSearchList;

        String mSearchQuery;

        SearchAdapter(ArrayList<SalaryItemClass> searchResultList, String searchQuery) {
            this.mSearchList = searchResultList;
            this.mSearchQuery = searchQuery;
            lvSalaryBudgetSearch.setOnItemClickListener(new CustomOnItemClickListener());
        }

        @Override
        public int getCount() {
            return mSearchList.size();
        }

        @Override
        public SalaryItemClass getItem(int position) {
            return mSearchList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return mSearchList.get(position).getSalaryItemId();
        }


        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            G_ViewHolders.SalaryBudgetSearch holder = new G_ViewHolders.SalaryBudgetSearch();
            convertView = LayoutInflater.from(getContext()).inflate(R.layout.salary_item_search_layout, parent, false);
            holder.salaryDuration = (TextView) convertView.findViewById(R.id.tvSalaryDuration);
            holder.circleBG = (RelativeLayout) convertView.findViewById(R.id.llCircleBG);
            holder.salaryItemInitial = (TextView) convertView.findViewById(R.id.tvFirstLetter);
            holder.itemName = (TextView) convertView.findViewById(R.id.salaryItem_ItemName);
            holder.itemPrice = (TextView) convertView.findViewById(R.id.salaryItem_ItemPrice);
            holder.itemQuantity = (TextView) convertView.findViewById(R.id.salaryItem_ItemQuantity);
//            holder.actualExpense_edit = (ImageView) convertView.findViewById(R.id.salaryBudget_edit);
            holder.actualExpense_delete = (ImageView) convertView.findViewById(R.id.salaryBudget_delete);
            if (mSearchList.get(position).getSalaryItemDuration().equalsIgnoreCase(SalaryItemClass.DAILY)) {
                holder.salaryDuration.setText("daily");
                holder.salaryDuration.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.caldroid_items_bg));
            } else {
                holder.salaryDuration.setText("monthly");
                holder.salaryDuration.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.caldroid_total_bg));
            }
            GradientDrawable bgShape = (GradientDrawable) holder.circleBG.getBackground();
//            bgShape.setColor(G_Functions.RandomColor(getContext()));
            bgShape.setColor(ContextCompat.getColor(getContext(), R.color.colorPrimary));
            String firstLetter = mSearchList.get(position).getSalaryItemName().substring(0, 1);
            if (mSearchList.get(position).getSalaryItemQuantity() > 99) {
                int px = G_Functions.dpToPx_xdpi(getContext(), 2);
                holder.itemQuantity.setPadding(px, 0, px, 0);
            } else if (mSearchList.get(position).getSalaryItemQuantity() > 9) {
                int px = G_Functions.dpToPx_xdpi(getContext(), 3);
                holder.itemQuantity.setPadding(px, 0, px, 0);
            } else {
                int px = G_Functions.dpToPx_xdpi(getContext(), 5);
                holder.itemQuantity.setPadding(px, 0, px, 0);
            }
            holder.itemQuantity.setText(Integer.toString(mSearchList.get(position).getSalaryItemQuantity()));
            holder.salaryItemInitial.setText(firstLetter.toUpperCase());
            holder.itemName.setText(mSearchList.get(position).getSalaryItemName());
            holder.itemPrice.setText(new SettingsManager(getContext()).getCurrency() + " " + G_Functions.formatNumber(mSearchList.get(position).getSalaryItemPrice()));
            holder.actualExpense_delete.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    AlertDialog.Builder mainbuilder = new AlertDialog.Builder(getContext());
                    mainbuilder.setMessage("Are you sure you want to delete " + mSearchList.get(position).getSalaryItemName() + "?");
                    mainbuilder.setTitle("Delete Item");
                    mainbuilder.setCancelable(true);
                    mainbuilder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialog, int id) {
                            if (mSearchList.get(position).getSalaryItemDuration().equalsIgnoreCase(SalaryItemClass.MONTHLY)) {
                                salaryBudget.getAdapter().deleteSingleSalaryItem(mSearchList.get(position));
                                if (salaryBudget != null && salaryBudget.isVisible()) {
                                    salaryBudget.updateData();
                                    new ExecuteSearch(mSearchQuery).execute(mSearchQuery);
                                }
                            } else {
                                salaryBudget_daily.getAdapter().deleteSingleSalaryItem(mSearchList.get(position));
                                if (salaryBudget_daily != null && salaryBudget_daily.isVisible()) {
                                    salaryBudget_daily.updateData();
                                    new ExecuteSearch(mSearchQuery).execute(mSearchQuery);
                                }
                            }
                        }
                    });
                    mainbuilder.setNegativeButton("No", new DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialog, int id) {
                            dialog.cancel();
                        }
                    });

                    AlertDialog mainAlert = mainbuilder.create();
                    mainAlert.show();
                }
            });
            return convertView;
        }

        double newItemPrice = 0.00;

        class CustomOnItemClickListener implements AdapterView.OnItemClickListener {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {
                final double priceBeforeEdit = mSearchList.get(position).getSalaryItemPrice();
                View dialoglayout = LayoutInflater.from(getContext()).inflate(R.layout.add_salary_item_dialog, null);
                final EditText etSalaryBudgetName = (EditText) dialoglayout.findViewById(R.id.addSalaryItem_itemName);
                final EditText etSalaryBudgetPrice = (EditText) dialoglayout.findViewById(R.id.addSalaryItem_itemPrice);
                final EditText etSalaryBudgetQuantity = (EditText) dialoglayout.findViewById(R.id.addSalaryItem_itemQuantity);
                final CheckBox cbSaveItem = (CheckBox) dialoglayout.findViewById(R.id.cbActualExpense_saveItem);
                final CheckBox cbActualExpense_saveToMonthly = (CheckBox) dialoglayout.findViewById(R.id.cbActualExpense_saveToMonthly);
                final EditText etSalaryItem_multiplier = (EditText) dialoglayout.findViewById(R.id.etSalaryItem_multiplier);

                etSalaryBudgetName.setText((mSearchList.get(position).getSalaryItemName()));
                etSalaryBudgetPrice.setText(String.format("%1$.2f", (mSearchList.get(position).getSalaryItemPrice())));
                etSalaryBudgetQuantity.setText(Integer.toString(mSearchList.get(position).getSalaryItemQuantity()));
                etSalaryBudgetName.setSelection(etSalaryBudgetName.getText().length());
                etSalaryBudgetPrice.setSelection(etSalaryBudgetPrice.getText().length());
                etSalaryBudgetQuantity.setSelection(etSalaryBudgetQuantity.getText().length());
                if (mSearchList.get(position).getSalaryItemDuration().equalsIgnoreCase(SalaryItemClass.DAILY)) {
                    cbActualExpense_saveToMonthly.setChecked(true);
                    cbActualExpense_saveToMonthly.setVisibility(View.VISIBLE);
                    etSalaryItem_multiplier.setText("1");
                    etSalaryItem_multiplier.setVisibility(View.VISIBLE);
                } else {
                    cbActualExpense_saveToMonthly.setChecked(false);
                    cbActualExpense_saveToMonthly.setVisibility(View.GONE);
                    etSalaryItem_multiplier.setText("");
                    etSalaryItem_multiplier.setVisibility(View.GONE);
                }
                newItemPrice = Double.parseDouble(etSalaryBudgetPrice.getText().toString());
                etSalaryBudgetPrice.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        if (!etSalaryBudgetPrice.getText().toString().trim().isEmpty() && !etSalaryBudgetQuantity.getText().toString().trim().isEmpty())
                            newItemPrice = Double.parseDouble(etSalaryBudgetPrice.getText().toString());
                    }
                });
                etSalaryBudgetQuantity.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {

                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        if (!etSalaryBudgetPrice.getText().toString().trim().isEmpty() && !etSalaryBudgetQuantity.getText().toString().trim().isEmpty()) {
                            double price = newItemPrice * Double.parseDouble(etSalaryBudgetQuantity.getText().toString());
                            etSalaryBudgetPrice.setText(String.format("%1$.2f", price));
                            newItemPrice = Double.parseDouble(etSalaryBudgetPrice.getText().toString().trim()) / Double.parseDouble(etSalaryBudgetQuantity.getText().toString().trim());
                        }
                    }
                });
                AlertDialog.Builder mainbuilder = new AlertDialog.Builder(getContext());
                mainbuilder.setView(dialoglayout);
                mainbuilder.setTitle("Update Item");
                mainbuilder.setCancelable(true);
                mainbuilder.setPositiveButton("Update", new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int id) {
                        if (mSearchList.get(position).getSalaryItemDuration().equalsIgnoreCase(SalaryItemClass.MONTHLY) || mSearchList.get(position).getSalaryItemDuration().equalsIgnoreCase(SalaryItemClass.MULTIPLIED_DAILY)) {
                            mSearchList.get(position).setSalaryItemName(etSalaryBudgetName.getText().toString());
                            mSearchList.get(position).setSalaryItemPrice(Double.parseDouble(etSalaryBudgetPrice.getText().toString()));
                            mSearchList.get(position).setSalaryItemQuantity(Integer.parseInt(etSalaryBudgetQuantity.getText().toString()));
                            if (salaryBudget != null && salaryBudget.isVisible()) {
                                if (priceBeforeEdit < Double.parseDouble(etSalaryBudgetPrice.getText().toString())) {
                                    salaryBudget.setTotalSavingsAndExpenses_update(((salaryBudget.getAdapter().getTotalPrice() - priceBeforeEdit) + Double.parseDouble(etSalaryBudgetPrice.getText().toString())), mSearchList.get(position), cbSaveItem.isChecked());
                                    new ExecuteSearch(mSearchQuery).execute(mSearchQuery);
                                } else {
                                    salaryBudget.getAdapter().updateItem(mSearchList.get(position), cbSaveItem.isChecked());
                                    salaryBudget.updateData();
                                    new ExecuteSearch(mSearchQuery).execute(mSearchQuery);
                                }
                            }
                        } else {
                            mSearchList.get(position).setSalaryItemName(etSalaryBudgetName.getText().toString());
                            mSearchList.get(position).setSalaryItemPrice(Double.parseDouble(etSalaryBudgetPrice.getText().toString()));
                            mSearchList.get(position).setSalaryItemQuantity(Integer.parseInt(etSalaryBudgetQuantity.getText().toString()));
                            if (salaryBudget_daily != null && salaryBudget_daily.isVisible()) {
                                if (priceBeforeEdit < Double.parseDouble(etSalaryBudgetPrice.getText().toString())) {
                                    salaryBudget_daily.setTotalSavingsAndExpenses_update(((salaryBudget_daily.getAdapter().getTotalPrice() - priceBeforeEdit) + Double.parseDouble(etSalaryBudgetPrice.getText().toString())), mSearchList.get(position), cbSaveItem.isChecked(), cbActualExpense_saveToMonthly.isChecked(), Integer.parseInt(etSalaryItem_multiplier.getText().toString().trim()));
                                    new ExecuteSearch(mSearchQuery).execute(mSearchQuery);
                                } else {
                                    salaryBudget_daily.getAdapter().updateItem(mSearchList.get(position), cbSaveItem.isChecked(), cbActualExpense_saveToMonthly.isChecked(), Integer.parseInt(etSalaryItem_multiplier.getText().toString().trim()));
                                    salaryBudget_daily.updateData();
                                    new ExecuteSearch(mSearchQuery).execute(mSearchQuery);
                                }

                            }
                        }
                    }
                });
                mainbuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int id) {
                        dialog.cancel();
                    }
                });
                final AlertDialog mainAlert = mainbuilder.create();
                etSalaryBudgetName.setOnFocusChangeListener(new View.OnFocusChangeListener() {
                    @Override
                    public void onFocusChange(View v, boolean hasFocus) {
                        if (hasFocus)
                            mainAlert.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
                    }
                });
                mainAlert.show();
            }
        }
    }
}
