package com.lemond.kurt.budgeter.Fragments;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.DialogInterface;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GestureDetectorCompat;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.view.ActionMode;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.SearchView;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.LinearLayout;

import com.lemond.kurt.budgeter.Adapters.Adapter_savedCommodities;
import com.lemond.kurt.budgeter.PagerAndPagerAdapters.CurrentMonthExpenses_Pager;
import com.lemond.kurt.budgeter.R;
import com.lemond.kurt.budgeter.Utilities.G_AlertDialogs;
import com.lemond.kurt.budgeter.Utilities.SettingsManager;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link SavedCommodities#newInstance} factory method to
 * create an instance of this fragment.
 */
public class SavedCommodities extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private OnFragmentInteractionListener mListener;

    private RecyclerView mRecyclerView;
    private FloatingActionButton mFab;
    private FloatingActionButton mFab_delete;
    private Adapter_savedCommodities mAdapter;
    private LinearLayout llEmptyItems;
    private ActionMode mActionMode;
    private SearchView mSearchView;
    private ActionModeCallback mActionModeCallback;

    private int nr = 0;


    /************************************************* AUTO GENERATED BY ANDROID STUDIO **************************************************/

    public SavedCommodities() {
        // Required empty public constructor
    }
    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment SavedCommodities.
     */
    // TODO: Rename and change types and number of parameters
    public static SavedCommodities newInstance(String param1, String param2) {
        SavedCommodities fragment = new SavedCommodities();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }

    /***********************************************************************************************************************************************************/

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        setHasOptionsMenu(true);
        // Inflate the layout for this fragment
        View rootView = inflater.inflate(R.layout.fragment_saved_commodities, container, false);
        mRecyclerView = (RecyclerView) rootView.findViewById(R.id.lvItems_savedCommodities);
        llEmptyItems = (LinearLayout) rootView.findViewById(R.id.llEmptyItems);
        mFab = (FloatingActionButton) rootView.findViewById(R.id.fab_savedCommodities);
        mFab_delete = (FloatingActionButton) rootView.findViewById(R.id.fab_savedCommodities_delete);
        mFab.setOnClickListener(new CustomClickListener());
        mFab_delete.setOnClickListener(new CustomClickListener());
        //ListView adapter setup
        mAdapter = new Adapter_savedCommodities(this.getContext(), getFragmentManager());
        mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
//        mRecyclerView.addItemDecoration(new G_ViewHolders().new DividerItemDecoration(getContext()));
        mRecyclerView.setAdapter(mAdapter);
        mActionModeCallback = new ActionModeCallback();
        mRecyclerView.setVisibility(View.GONE);
        mRecyclerView.addOnItemTouchListener(new RecyclerTouchListener(getContext(), mRecyclerView));
        llEmptyItems.setVisibility(View.VISIBLE);
        mAdapter.updateData();
        return rootView;
    }

    public void checkListIfEmpty(){
        if(mAdapter.getItemCount()>0){
            mRecyclerView.setVisibility(View.VISIBLE);
            llEmptyItems.setVisibility(View.GONE);
        }else{
            mRecyclerView.setVisibility(View.GONE);
            llEmptyItems.setVisibility(View.VISIBLE);
        }
    }

    @TargetApi(21)
    public void retainWindowColor(){
        if (android.os.Build.VERSION.SDK_INT >= 21) {
            Window window = getActivity().getWindow();
            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            window.setStatusBarColor(ContextCompat.getColor(getContext(), R.color.colorPrimaryDark));
        }
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.menu_saved_commodities, menu);
        MenuItem searchMenu = menu.findItem(R.id.menuSearch);
        mSearchView = (SearchView) searchMenu.getActionView();
        // Assumes current activity is the searchable activity
        mSearchView.setIconifiedByDefault(true); //  iconify the widget; expand it when clicked
        mSearchView.setQueryHint("Search Item");
        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                mAdapter.executeSearch(newText);
                return true;
            }
        });
        MenuItemCompat.setOnActionExpandListener(searchMenu, new MenuItemCompat.OnActionExpandListener() {
            @Override
            public boolean onMenuItemActionCollapse(MenuItem item) {
                mFab.setVisibility(View.VISIBLE);
                mAdapter.cancelSearch();
                mAdapter.updateData();
                return true;  // Return true to collapse action view
            }

            @Override
            public boolean onMenuItemActionExpand(MenuItem item) {
                mFab.setVisibility(View.GONE);
                return true;  // Return true to expand action view
            }
        });
        mSearchView.setMaxWidth(Integer.MAX_VALUE);
    }

    public SearchView getSearchView() {
        return mSearchView;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()){
            case R.id.menuSort:
                final String[] chosenSort = {""};
                LayoutInflater inflater = getActivity().getLayoutInflater();
                View dialoglayout = inflater.inflate(R.layout.sort_dialog, null);

                final LinearLayout llNameAsc = (LinearLayout) dialoglayout.findViewById(R.id.llNameAsc);
                final LinearLayout llNameDesc = (LinearLayout) dialoglayout.findViewById(R.id.llNameDesc);
                final LinearLayout llPriceAsc = (LinearLayout) dialoglayout.findViewById(R.id.llPriceAsc);
                final LinearLayout llPriceDesc = (LinearLayout) dialoglayout.findViewById(R.id.llPriceDesc);
                final LinearLayout llDateAsc = (LinearLayout) dialoglayout.findViewById(R.id.llDateAsc);
                final LinearLayout llDateDesc = (LinearLayout) dialoglayout.findViewById(R.id.llDateDesc);

                llDateAsc.setClickable(false);
                llDateDesc.setClickable(false);
                llDateAsc.setVisibility(View.GONE);
                llDateDesc.setVisibility(View.GONE);

                switch (new SettingsManager(getContext()).getItemSortOption()){
                    case SettingsManager.NAME_ASC:
                        llNameAsc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_ASC;
                        break;
                    case SettingsManager.NAME_DESC:
                        llNameDesc.setBackground(ContextCompat.getDrawable(getContext(),R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_DESC;
                        break;
                    case SettingsManager.PRICE_ASC:
                        llPriceAsc.setBackground(ContextCompat.getDrawable(getContext(),R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_ASC;
                        break;
                    case SettingsManager.PRICE_DESC:
                        llPriceDesc.setBackground(ContextCompat.getDrawable(getContext(),R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_DESC;
                        break;
                }
                llNameAsc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameAsc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_ASC;
                    }
                });
                llNameDesc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.NAME_DESC;
                    }
                });
                llPriceAsc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_ASC;
                    }
                });
                llPriceDesc.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        llNameAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llNameDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceAsc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.md_white_1000));
                        llPriceDesc.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.selected_sort));
                        chosenSort[0] = SettingsManager.PRICE_DESC;
                    }
                });
                AlertDialog.Builder mainbuilder = new AlertDialog.Builder(getActivity());
                mainbuilder.setView(dialoglayout);
                mainbuilder.setTitle("Sort");
                mainbuilder.setCancelable(true);
                mainbuilder.setPositiveButton("Apply", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        new SettingsManager(getContext()).setItemSortOption(chosenSort[0]);
                        mAdapter.updateData();
                    }
                });
                mainbuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

                final AlertDialog mainAlert = mainbuilder.create();
                mainAlert.show();
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    public Adapter_savedCommodities getAdapter(){
        return mAdapter;
    }

    /**************************************************************
     * CUSTOM LISTENERS AND ACTIONMODE.CALLBACK
     **************************************************/

    private class CustomClickListener implements View.OnClickListener{

        @Override
        public void onClick(View v) {
            switch (v.getId()){
                case R.id.fab_savedCommodities:
                    new G_AlertDialogs().PrepareAddDialog_Dialog(getContext(), SavedCommodities.this);
                    break;
                case R.id.fab_savedCommodities_delete:
                    nr = 0;
                    mActionMode.finish();
                    break;
                default:
            }

        }
    }

    private class ActionModeCallback implements android.support.v7.view.ActionMode.Callback {
        @SuppressWarnings("unused")

        @Override
        public boolean onCreateActionMode(android.support.v7.view.ActionMode mode, Menu menu) {
            MenuInflater inflater = getActivity().getMenuInflater();
            inflater.inflate(R.menu.context_menu, menu);
            retainWindowColor();
            mFab.setVisibility(View.GONE);
            mFab_delete.setVisibility(View.VISIBLE);
            mActionMode = mode;
            return true;
        }

        @Override
        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
            return false;
        }

        @Override
        public boolean onActionItemClicked(final ActionMode mode, MenuItem item) {
            switch (item.getItemId()) {
                case R.id.menu_delete:
                    String thisString = "these items?";
                    if (nr == 1) thisString = "this item?";
                    AlertDialog.Builder alertBuilder = new AlertDialog.Builder(getActivity());
                    alertBuilder.setMessage("Are you sure you want to delete " + thisString);
                    alertBuilder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            nr = 0;
                            mAdapter.deleteSelected();
                            mode.finish();
                            mFab.setVisibility(View.VISIBLE);
                            mFab_delete.setVisibility(View.GONE);
                        }
                    });
                    alertBuilder.setNegativeButton("No", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    alertBuilder.create().show();
                    return true;
                case R.id.menu_selectAll:
                    for (int count = 0; count < mAdapter.getItemCount(); count++) {
                        mAdapter.addOnItemsToBeRemove(count);
                    }
                    nr = mAdapter.getItemCount();
                    mode.setTitle(nr + " selected");
                    return true;
                default:
                    return false;
            }
        }

        @Override
        public void onDestroyActionMode(android.support.v7.view.ActionMode mode) {
            if(mActionMode!=null){
                mActionMode = null;
            }
            mAdapter.setLongItemClicked(false);
            CurrentMonthExpenses_Pager.setContextActivated(false);
            mAdapter.clearSelection();
            mFab.setVisibility(View.VISIBLE);
            mFab_delete.setVisibility(View.GONE);
        }
    }

    private class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {

        private GestureDetectorCompat gestureDetectorCompat;

        public RecyclerTouchListener(Context context, final RecyclerView recyclerView) {
            gestureDetectorCompat = new GestureDetectorCompat(context, new GestureDetector.SimpleOnGestureListener() {
                private int itemSelected = 0;

                @Override
                public void onLongPress(MotionEvent e) {
                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                    itemSelected = recyclerView.getChildAdapterPosition(child);

                    if(itemSelected>-1) {
                        nr = 0;
                        if (mActionMode == null) {
                            mActionMode = ((AppCompatActivity) getActivity()).startSupportActionMode(mActionModeCallback);
                        }
                        if (!mAdapter.isItemLongClicked()) {
                            mAdapter.setLongItemClicked(true);
                            mAdapter.addOnItemsToBeRemove(itemSelected);
                            nr++;
                            mActionMode.setTitle(nr + " selected");
                        }
                    }
                }

                @Override
                public boolean onSingleTapConfirmed(MotionEvent e) {
                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                    itemSelected = recyclerView.getChildAdapterPosition(child);

                    if(itemSelected>-1) {
                        if (mAdapter.isItemLongClicked()) {
                            if (!mAdapter.isPositionChecked(itemSelected)) {
                                nr++;
                                mAdapter.addOnItemsToBeRemove(itemSelected);
                                mActionMode.setTitle(nr + " selected");
                            } else {
                                nr--;
                                if(nr==0)mActionMode.finish();
                                else mActionMode.setTitle(nr + " selected");
                                mAdapter.removeSelection(itemSelected);
                            }
                        } else {
                            new G_AlertDialogs().CustomOnItemClick_Dialog(getContext(), mAdapter.getItem(itemSelected), SavedCommodities.this);
                        }
                    }
                    return false;
                }
            });
        }

        @Override
        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {
            gestureDetectorCompat.onTouchEvent(e);
            return false;
        }

        @Override
        public void onTouchEvent(RecyclerView rv, MotionEvent e) {
        }

        @Override
        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {

        }
    }

//    private class CustomMultiChoiceModeListener implements AbsListView.MultiChoiceModeListener{
//        @Override
//        public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {
//            if (checked) {
//                nr++;
//                mAdapter.addOnItemsToBeRemove(position);
//            } else {
//                nr--;
//                mAdapter.removeSelection(Integer.valueOf(position));
//            }
//            mode.setTitle(nr + " selected");
//        }
//
//        @Override
//        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
//            nr = 0;
//            mAdapter.setLongItemClicked(true);
//            MenuInflater inflater = getActivity().getMenuInflater();
//            inflater.inflate(R.menu.context_menu, menu);
//            retainWindowColor();
//            mFab.setVisibility(View.GONE);
//            mFab_delete.setVisibility(View.VISIBLE);
//            mActionMode = mode;
//            return true;
//        }
//
//        @Override
//        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
//            return false;
//        }
//
//        @Override
//        public boolean onActionItemClicked(final ActionMode mode, MenuItem item) {
//            switch (item.getItemId()) {
//                case R.id.menu_delete:
//                    String thisString = "these items?";
//                    if(nr==1) thisString = "this item?";
//                    AlertDialog.Builder alertBuilder = new AlertDialog.Builder(getActivity());
//                    alertBuilder.setMessage("Are you sure you want to delete " + thisString);
//                    alertBuilder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            nr = 0;
//                            mAdapter.deleteSelected();
//                            mode.finish();
//                            mFab.setVisibility(View.VISIBLE);
//                            mFab_delete.setVisibility(View.GONE);
//                        }
//                    });
//                    alertBuilder.setNegativeButton("No", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    alertBuilder.create().show();
//                    break;
//                case R.id.menu_selectAll:
//                    for(int count =0;count<mAdapter.getCount(); count++){
//                        mListView.setItemChecked(count, true);
//                        mAdapter.addOnItemsToBeRemove(count);
//                    }
//                    nr = mAdapter.getCount();
//                    mode.setTitle(nr + " selected");
//                    break;
//            }
//            return false;
//        }
//
//        @Override
//        public void onDestroyActionMode(ActionMode mode) {
//            mAdapter.setLongItemClicked(false);
//            mAdapter.clearSelection();
//            mFab.setVisibility(View.VISIBLE);
//            mFab_delete.setVisibility(View.GONE);
//            mActionMode = null;
//        }
//    }
//
//    private class CustomItemClickListener implements AdapterView.OnItemClickListener{
//        @Override
//        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
//            new G_AlertDialogs().CustomOnItemClick_Dialog(getContext(), mAdapter.getItem(position), SavedCommodities.this);
//        }
//    }
//
//    private class CustomOnItemLongClickListener implements AdapterView.OnItemLongClickListener{
//        @Override
//        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
//            mListView.setItemChecked(position, !mAdapter.isPositionChecked(position));
//            return false;
//        }
//    }
}
